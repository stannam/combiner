# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import makeHTML
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setFixedSize(374, 161)
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(200, 130, 156, 23))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")

        self.titleEdit = QtWidgets.QLineEdit(Dialog)
        self.titleEdit.setGeometry(QtCore.QRect(41, 20, 321, 20))
        self.titleEdit.setObjectName("titleEdit")

        self.subDirCB = QtWidgets.QCheckBox(Dialog)
        self.subDirCB.setGeometry(QtCore.QRect(345, 97, 16, 16))
        self.subDirCB.setObjectName("subDirCB")

        self.chooseDirButton = QtWidgets.QPushButton(Dialog)
        self.chooseDirButton.setGeometry(QtCore.QRect(263, 57, 102, 23))
        self.chooseDirButton.setObjectName("chooseDirButton")

        self.titleLabel = QtWidgets.QLabel(Dialog)
        self.titleLabel.setGeometry(QtCore.QRect(9, 20, 24, 16))
        self.titleLabel.setObjectName("titleLabel")

        self.pathLabel = QtWidgets.QLabel(Dialog)
        self.pathLabel.setGeometry(QtCore.QRect(9, 57, 26, 16))
        self.pathLabel.setObjectName("pathLabel")

        self.subDir = QtWidgets.QLabel(Dialog)
        self.subDir.setGeometry(QtCore.QRect(185, 97, 180, 16))
        self.subDir.setObjectName("subDir")

        self.pathEdit = QtWidgets.QLineEdit(Dialog)
        self.pathEdit.setGeometry(QtCore.QRect(41, 58, 221, 20))
        self.pathEdit.setObjectName("pathEdit")
        self.pathEdit.setReadOnly(True)

        self.retranslateUi(Dialog)

        self.buttonBox.accepted.connect(self.run)
        self.buttonBox.rejected.connect(QtWidgets.qApp.quit)
        self.chooseDirButton.clicked.connect(self.pickDir)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Webtoon images into HTML"))
        self.chooseDirButton.setText(_translate("Dialog", "Choose directory..."))
        self.titleLabel.setText(_translate("Dialog", "Title:"))
        self.pathLabel.setText(_translate("Dialog", "Path:"))
        self.subDir.setText(_translate("Dialog", "Combine images on a single page"))

    def pickDir(self):
        dirname = QtWidgets.QFileDialog.getExistingDirectory(self, "Choose a directory")
        if dirname != '':
            self.pathEdit.setText(dirname)
        if self.titleEdit.text() == '':
            fallback_title = dirname.split('/')[-1]
            self.titleEdit.setText(fallback_title)

    def run(self):
        img_path = self.pathEdit.text()
        fallback_title = img_path.split('/')[-1]
        if self.titleEdit.text() == '':
            title = fallback_title
        else:
            title = self.titleEdit.text()

        file_list = []
        for candidate in os.listdir(img_path):
            if candidate.endswith(".jpg") or candidate.endswith(".png"):
                file_list.append(candidate)

        file_list.sort()

        for numbering, file in enumerate(file_list, start=1):
            is_last = True if numbering == len(file_list) else False
            result = makeHTML.genHtml(title=title, img_name=file, numbering=numbering, is_last=is_last)
            makeHTML.writeHTML(html=result, path=img_path, numbering=numbering)

        self.finishMessage()

    def finishMessage(self):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Finished")
        msg.setText("All image files are successfully converted to html files.")
        msg.exec_()
